quantityOfVertices, quantityOfEdges = map(int, input('input quantityOfVertices, quantityOfEdges').split()) #кількість вершин і ребер у графі
adjacent = [[] for i in range(quantityOfVertices)] #список суміжності
colors = [int(0) for i in range(quantityOfVertices)] #масив для зберігання кольорів вершин
topSort = [] #топологічно впорядкована перестановка вершин графа

#зчитуємо граф, заданий списком ребер
for i in range(quantityOfEdges):
    vertice, edge = map(int, input('input vertice, edge').split())
    vertice -= 1
    edge -= 1
    adjacent[vertice].append(edge)


def topologicalSort(vertice) : #топологічне сортування вершин графа
    #якщо вершина чорна, то не здійснюємо з неї виклик процедури
    if colors[vertice] == 2:
        return True
    #якщо вершина сіра, то орграф містить цикл, виходимо з процедури
    if colors[vertice] == 1:
        return False
    colors[vertice] = 1 #помічаємо вершину як сіру
    #запускаємо обхід із всіх вершин, суміжних з вершиною v
    for edge in adjacent[vertice]:
        #виклик обходу від вершини w, суміжної з вершиною v
        if not topologicalSort(edge):
            return False
    colors[vertice] = 2 #помічаємо вершину як чорну
    #додаємо відвідану вершину в топологічний порядок
    topSort.append(vertice)
    return True

def runSort():
    cycle = False #прапор, що показує чи містить орграф цикл
    #запускаємо процедуру, яка топологічно сортує вершини графа
    for vertice in range(quantityOfVertices):
        if not topologicalSort(vertice):
            cycle = True
        if not cycle:
            topSort.reverse()
    #інакше виводимо топологічно впорядковану перестановку його вершин
    for vertice in topSort:
        print(vertice + 1, end=' ')
    else:
        print('Cycle')


runSort()
